import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
from collections import defaultdict

# üîë –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
API_TOKEN = "8406440473:AAHELuDr2lvSCwN74x8hl-sqsX4LdUUoyPk"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
CATEGORIES = ["–ï–¥–∞", "–î–æ–º", "–ê–ø—Ç–µ–∫–∞", "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–®–º–æ—Ç", "–ö–∞—Ñ–µ/–†–µ—Å—Ç–æ—Ä–∞–Ω", "–ê–≤—Ç–æ", "–û—Ç–¥—ã—Ö"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
expenses = defaultdict(list)


# ---- –°–æ—Å—Ç–æ—è–Ω–∏—è ----
class ExpenseForm(StatesGroup):
    waiting_for_amount = State()


# ---- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ----
def get_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"cat:{cat}") for cat in CATEGORIES[:4]],
            [InlineKeyboardButton(text=cat, callback_data=f"cat:{cat}") for cat in CATEGORIES[4:]],
            [
                InlineKeyboardButton(text="–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü", callback_data="stats_month"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel"),
            ],
        ]
    )
    return keyboard


# ---- –•—ç–Ω–¥–ª–µ—Ä—ã ----
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü:",
        reply_markup=get_keyboard()
    )


async def category_chosen(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split(":")[1]
    await state.update_data(category=category)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª:")
    await state.set_state(ExpenseForm.waiting_for_amount)


async def amount_entered(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123.45")
        return

    expenses[category].append((amount, datetime.now()))
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} ‚Ç¨ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{category}¬ª ‚úÖ")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=get_keyboard())


async def show_stats(callback: types.CallbackQuery, state: FSMContext):
    now = datetime.now()
    total = 0
    report = "üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n\n"
    for category, items in expenses.items():
        cat_sum = sum(amount for amount, date in items if date.month == now.month and date.year == now.year)
        if cat_sum > 0:
            report += f"‚Äî {category}: {cat_sum:.2f} ‚Ç¨\n"
            total += cat_sum
    report += f"\n–ò—Ç–æ–≥–æ: {total:.2f} ‚Ç¨"
    await callback.message.answer(report)
    await state.clear()


async def cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå", reply_markup=get_keyboard())


# ---- Main ----
async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, F.text == "/start")
    dp.callback_query.register(category_chosen, F.data.startswith("cat:"))
    dp.message.register(amount_entered, ExpenseForm.waiting_for_amount)
    dp.callback_query.register(show_stats, F.data == "stats_month")
    dp.callback_query.register(cancel, F.data == "cancel")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
